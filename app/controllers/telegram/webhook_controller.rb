require 'telegram/bot'

class Telegram::WebhookController < Telegram::Bot::UpdatesController
  include Telegram::Bot::UpdatesController::MessageContext

  REDIRECT_PATHS = {
    '‚úç' => { command: :nickname!, mode: :context, message: '–í–µ–¥–∏ —Å–≤—ñ–π Steam –Ω—ñ–∫ –±—É–¥—å –ª–∞—Å–∫–∞' },
    'üîî' => { command: :enable_notifications!, mode: :hit },
    'üîï' => { command: :silent!, mode: :hit }
  }.freeze

  def start!
    user = User.find_or_initialize_by(username: chat['username'])

    user.chat_name = Encryptor::Encryptor.encrypt(chat['id'])
    if user.save
      respond_with :message,
                   text: "–ü—Ä–∏–≤—ñ—Ç, #{chat['first_name']} —Ç–µ–±–µ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ",
                   reply_markup: {
                     remove_keyboard: true
                   }
      respond_with :message, text: '–í–µ–¥–∏ —Å–≤—ñ–π Steam –Ω—ñ–∫ –±—É–¥—å –ª–∞—Å–∫–∞'
      save_context :nickname!
    else
      respond_with :message, text: "–ù–∞ –∂–∞–ª—å —Ç—Ä–∞–ø–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞: \n#{user.errors.full_messages.join("\n")}"
    end
  end

  def nickname!(nickname = '')
    if nickname.blank?
      respond_with :message, text: '–¢–≤—ñ–π –Ω—ñ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º'
    else
      User.find_by(username: chat['username']).update!(steam_name: nickname)
      respond_with :message, parse_mode: 'markdown', text: "–ù—ñ–∫ *#{nickname}* –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
                   reply_markup: keyboard_default_markup
    end
  end

  def silent!(*)
    User.find_by(username: chat['username']).update!(silent_mode: true)
    respond_with :message, text: '–¢–µ–ø–µ—Ä —Ç–∏ –Ω–µ –æ—Ç—Ä–∏–º—É—î—à —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', reply_markup: keyboard_default_markup
  end

  def enable_notifications!(*)
    User.find_by(username: chat['username']).update!(silent_mode: false)
    respond_with :message, text: '–¢–∏ –∑–Ω–æ–≤ –æ—Ç—Ä–∏–º—É—î—à —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', reply_markup: keyboard_default_markup
  end

  def message(msg = nil)
    return unless msg && REDIRECT_PATHS.keys.include?(msg['text'][0])

    command_entity = REDIRECT_PATHS[msg['text'][0]]
    case command_entity[:mode]
    when :context
      respond_with(:message, text: command_entity[:message]) if command_entity[:message]
      save_context command_entity[:command]
    when :hit
      send(command_entity[:command])
    end
  end

  def keyboard_default_markup
    notification_mode = User.find_by(username: chat['username']).silent_mode ? 'üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è' : 'üîï –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è'
    {
      keyboard: [['‚úçÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫'], [notification_mode]],
      resize_keyboard: true,
      input_field_placeholder: 'Sho?'
    }
  end

  # def abobus!(value = nil, *)
  #   if value
  #     respond_with :message, text: '–î–∞, —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Å–∞–ª –∫—ñ—Ç—É'
  #   else
  #     save_context :abobus!
  #     respond_with :message, text: '–¢—ã —Å–æ—Å–∞–ª –∫—ñ—Ç—É?', reply_markup: {
  #       keyboard: [['–î–∞, –Ø —Å–æ—Å–∞–ª –∫—ñ—Ç—É']],
  #       resize_keyboard: true,
  #       one_time_keyboard: true,
  #       selective: true,
  #       input_field_placeholder: 'Sho?'
  #     }
  #   end
  # end
end
